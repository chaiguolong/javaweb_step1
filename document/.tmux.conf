#将r键设置为加载配置文件，并显示"reloaded!"信息  
bind-key R source-file ~/.tmux.conf \; display-message ":-) Reload Configure Done!"
#设置前缀指令
set -g prefix C-a #
unbind C-b # C-b即Ctrl+b键，unbind意味着解除绑定
bind C-a send-prefix # 绑定Ctrl+a为新的指令前缀
#设置终端颜色为256色,!!!不能删除下面这句
set -g default-terminal "screen-256color"  
# v2.1及以上的版本
set-option -g mouse on
#更改新增面板键
unbind '"'
bind '-' splitw -v -c '#{pane_current_path}' # 垂直方向新增面板，默认进入当前目录
unbind '%'
bind '\' splitw -h -c '#{pane_current_path}' # 水平方向新增面板，默认进入当前目录
# 绑定hjkl键为面板切换的上下左右键
bind -r k select-pane -U # 绑定k为↑
bind -r j select-pane -D # 绑定j为↓
bind -r h select-pane -L # 绑定h为←
bind -r l select-pane -R # 绑定l为→
# 绑定Ctrl+hjkl键为面板上下左右调整边缘的快捷指令
bind -r ^k resizep -U 10 # 绑定Ctrl+k为往↑调整面板边缘10个单元格
bind -r ^j resizep -D 10 # 绑定Ctrl+j为往↓调整面板边缘10个单元格
bind -r ^h resizep -L 10 # 绑定Ctrl+h为往←调整面板边缘10个单元格
bind -r ^l resizep -R 10 # 绑定Ctrl+l为往→调整面板边缘10个单元格
#将快捷键设置为熟悉的vi风格
setw -g mode-keys vi # 开启vi风格后，支持vi的C-d、C-u、hjkl等快捷键
#bind Escape copy-mode # 绑定esc键为进入复制模式
bind -T copy-mode-vi v send-keys -X begin-selection	# 绑定v键为开始选择文本
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel # 绑定y键为复制选中文本
bind p pasteb # 绑定p键为粘贴文本（p键默认用于进入上一个窗口，不建议覆盖）
#设置窗口的起始下标为1
set -g base-index 1
#设置面板的起始下标为1
set -g pane-base-index 1
#关闭默认的rename机制
setw -g automatic-rename off
setw -g allow-rename off

# 绑定y键为复制选中文本到Mac系统粘贴板
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'
# 鼠标拖动选中文本，并复制到Mac系统粘贴板
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "pbcopy"


#设置status-bar颜色  
#重要!!!,不设置前景色为白色,tmuxline未激活窗口太暗看不清
#set -g status-fg white  

#--------------tmux面板像vim一样导航开始---------------------
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
#--------------tmux面板像vim一样导航开始结束---------------------





source-file /Users/dream/.tmuxstatusline
#保存tmux的状态
#保存，快捷指令是prefix + Ctrl + s，tmux状态栏在保存开始，保存后分别提示”Saving…”，”Tmux environment saved !”。
#恢复，快捷指令是prefix + Ctrl + r，tmux状态栏在恢复开始，恢复后分别提示”Restoring…”，”Tmux restore complete !”。
#设置一小时备份一次
set -g @continuum-save-interval '60'
#启用自动恢复
set -g @continuum-restore 'on'


#-------------------------------------------插件----------------------------------------------
# 默认需要引入的插件
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect.git'
set -g @plugin 'tmux-plugins/tmux-continuum.git'
set -g @plugin 'christoomey/vim-tmux-navigator'
# 引入其他插件的示例
# set -g @plugin 'github_username/plugin_name' # 格式：github用户名/插件名
# set -g @plugin 'git@github.com/user/plugin' # 格式：git@github插件地址

# 初始化tmux插件管理器(保证这行在~/.tmux.conf的非常靠后的位置)
run '~/.tmux/plugins/tpm/tpm'

